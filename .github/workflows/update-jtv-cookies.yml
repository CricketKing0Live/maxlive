name: Update Cookie in Jiotv.json (FIXED)

on:
  schedule:
    - cron: '0 */6 * * *'   # Har 6 hours
  workflow_dispatch:

jobs:
  update:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: from actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Requests
        run: pip install requests

      - name: Debug - List Files
        run: |
          echo "Current directory:"
          pwd
          echo "Files in repo:"
          ls -la
          echo "Checking for Jiotv.json..."
          if [ -f "Jiotv.json" ]; then
            echo "Jiotv.json FOUND!"
            echo "Content preview:"
            head -20 Jiotv.json
          else
            echo "Jiotv.json NOT FOUND!"
            exit 1
          fi

      - name: Extract Cookie & Update Jiotv.json
        run: |
          python - <<'PY'
          import json
          import requests
          import os
          from urllib.parse import urlparse, parse_qs

          WORKER_URL = "https://jo-json.vodep39240327.workers.dev/"
          PLAYLIST_FILE = "Jiotv.json"
          TIMEOUT = 30
          MAX_RETRIES = 3

          def get_cookie():
              print(f"Fetching from: {WORKER_URL}")
              for attempt in range(1, MAX_RETRIES + 1):
                  try:
                      print(f"  â†’ Attempt {attempt}")
                      resp = requests.get(WORKER_URL, timeout=TIMEOUT)
                      resp.raise_for_status()
                      data = resp.json()
                      if not data:
                          continue
                      url = next(iter(data.values())).get('url', '')
                      if not url:
                          continue
                      parsed = urlparse(url)
                      hdnea = parse_qs(parsed.query).get('__hdnea__', [])
                      if hdnea:
                          cookie = f"__hdnea__={hdnea[0]}"
                          print(f"SUCCESS: Cookie = {cookie}")
                          return cookie
                  except Exception as e:
                      print(f"  Failed: {e}")
              return None

          # Load playlist
          if not os.path.exists(PLAYLIST_FILE):
              print(f"{PLAYLIST_FILE} missing!")
              exit(1)

          with open(PLAYLIST_FILE, 'r', encoding='utf-8') as f:
              playlist = json.load(f)

          if not isinstance(playlist, list) or len(playlist) == 0:
              print("Playlist empty!")
              exit(1)

          # Get new cookie
          new_cookie = get_cookie()
          if not new_cookie:
              print("No cookie extracted!")
              exit(1)

          # Update ALL
          updated = 0
          for ch in playlist:
              if ch.get("cookie") != new_cookie:
                  ch["cookie"] = new_cookie
                  updated += 1

          print(f"Updating {updated} channels with new cookie...")

          # Save
          with open(PLAYLIST_FILE, 'w', encoding='utf-8') as f:
              json.dump(playlist, f, indent=2, ensure_ascii=False)

          print(f"{PLAYLIST_FILE} SAVED!")
          PY

      - name: Debug - Show Updated File
        run: |
          echo "Updated Jiotv.json:"
          cat Jiotv.json | grep -A1 -B1 "__hdnea__"
          echo ""
          echo "File size: $(wc -c < Jiotv.json) bytes"

      - name: Commit & Push (FORCE UPDATE)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Force add
          git add -A
          
          # Check diff
          git status
          git diff --staged --quiet && echo "No changes detected" || echo "Changes detected!"
          
          # Commit
          git commit -m "Auto: Updated cookie in Jiotv.json (run #${{ github.run_number }})" || echo "Nothing to commit"
          
          # Push
          git push origin HEAD:${{ github.ref_name }} --force-with-lease
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
