name: Update JioTV Playlist Cookies

on:
  schedule:
    - cron: '0 */12 * * *' # Runs every 12 hours
  workflow_dispatch: # Allows manual trigger

jobs:
  update-cookies:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests urllib.parse

      - name: Update cookies in Jiotv.json
        run: |
          python -c '
          import json
          import requests
          from urllib.parse import urlparse, parse_qs

          # Configuration
          API_URL = "https://jo-json.vodep39240327.workers.dev"
          PLAYLIST_FILE = "Jiotv.json"

          # Channel name mapping: Map readable name to channel ID (expand as needed)
          # Example: "Star Plus HD" -> 143 (adjust IDs based on your playlist links)
          NAME_TO_ID = {
              "Star Plus HD": 143,
              "Colors HD": 144,
              "History HD": 146,
              "Star Sports 3": 147,
              "Star Sports 1 Hindi": 148,
              "Star Gold HD": 156,
              # Add more mappings here, e.g., "CNBC Tv18 Prime HD": 143
              # You can derive IDs from the "link" URL path if it contains the ID
          }

          def extract_hdnea_from_url(url):
              """Extract __hdnea__ cookie from MPD URL."""
              try:
                  parsed = urlparse(url)
                  query = parse_qs(parsed.query)
                  return query.get("__hdnea__", [None])[0]
              except:
                  return None

          def fetch_new_cookies():
              try:
                  response = requests.get(API_URL)
                  response.raise_for_status()
                  data = response.json()
                  print(f"Fetched API data for {len(data)} channels")
                  # Extract cookies by channel ID
                  cookies_by_id = {}
                  for channel_id, info in data.items():
                      if isinstance(info, dict) and "url" in info:
                          cookie = extract_hdnea_from_url(info["url"])
                          if cookie:
                              cookies_by_id[channel_id] = cookie
                  print(f"Extracted cookies for {len(cookies_by_id)} channels")
                  return cookies_by_id
              except requests.RequestException as e:
                  print(f"Error fetching data from {API_URL}: {e}")
                  return {}
              except ValueError as e:
                  print(f"Error parsing JSON from {API_URL}: {e}")
                  return {}

          def get_channel_id_from_link(link):
              """Extract channel ID from link if possible (fallback to mapping)."""
              try:
                  parsed = urlparse(link)
                  path_segments = parsed.path.split("/")
                  # Assume ID is in URL like /bpk-tv/Channel_Name_BTS/ or similar; adjust if needed
                  for seg in path_segments:
                      if seg.isdigit():
                          return int(seg)
                  return None
              except:
                  return None

          def update_playlist_cookies():
              # Read the existing playlist
              try:
                  with open(PLAYLIST_FILE, "r") as file:
                      playlist = json.load(file)
              except Exception as e:
                  print(f"Error reading {PLAYLIST_FILE}: {e}")
                  return

              # Fetch new cookies from API
              new_cookies = fetch_new_cookies()
              if not new_cookies:
                  print("No valid data from API, exiting.")
                  return

              # Update cookies in the playlist
              updated = False
              for channel in playlist:
                  channel_name = channel.get("name")
                  if not channel_name:
                      continue
                  channel_id = NAME_TO_ID.get(channel_name) or get_channel_id_from_link(channel.get("link", ""))
                  if channel_id and str(channel_id) in new_cookies:
                      new_cookie = new_cookies[str(channel_id)]
                      old_cookie = channel.get("cookie")
                      if new_cookie and new_cookie != old_cookie:
                          channel["cookie"] = new_cookie
                          updated = True
                          print(f"Updated cookie for {channel_name} (ID: {channel_id})")

              # Save updated playlist if changes were made
              if updated:
                  try:
                      with open(PLAYLIST_FILE, "w") as file:
                          json.dump(playlist, file, indent=2)
                      print(f"Successfully updated {PLAYLIST_FILE}")
                  except Exception as e:
                      print(f"Error writing to {PLAYLIST_FILE}: {e}")
              else:
                  print("No cookie updates required")

          if __name__ == "__main__":
              update_playlist_cookies()
          '

      - name: Commit changes
        run: |
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'
          git add Jiotv.json
          if git diff --quiet || ! git diff --staged --quiet; then
            git commit -m "Update cookies in Jiotv.json from API"
            git push
          else
            echo "No changes to commit"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
