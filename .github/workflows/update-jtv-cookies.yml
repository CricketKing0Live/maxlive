name: Update Same Cookie in All Channels of Jiotv.json

on:
  schedule:
    - cron: '0 */6 * * *'   # Har 6 hours
  workflow_dispatch:

jobs:
  update:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Requests
        run: pip install requests

      - name: Extract Cookie from Worker URL & Update Jiotv.json
        run: |
          python - <<'PY'
          import json
          import requests
          import os
          from urllib.parse import urlparse, parse_qs

          # MAIN URL (Yahan se cookie nikalega)
          WORKER_URL = "https://jo-json.vodep39240327.workers.dev/"
          PLAYLIST_FILE = "Jiotv.json"
          TIMEOUT = 30
          MAX_RETRIES = 3

          def extract_cookie_from_worker():
              print(f"Fetching cookie from: {WORKER_URL}")
              for attempt in range(1, MAX_RETRIES + 1):
                  try:
                      print(f"  â†’ Attempt {attempt}...")
                      response = requests.get(WORKER_URL, timeout=TIMEOUT, allow_redirects=True)
                      final_url = response.url
                      print(f"Final URL: {final_url[:120]}...")

                      # Extract __, Playlists, Channels
                      parsed = urlparse(final_url)
                      params = parse_qs(parsed.query)
                      hdnea = params.get('__hdnea__', [])
                      if hdnea:
                          cookie = f"__hdnea__={hdnea[0]}"
                          print(f"EXTRACTED COOKIE: {cookie}")
                          return cookie
                  except Exception as e:
                      print(f"  Failed: {e}")
                      if attempt < MAX_RETRIES:
                          import time; time.sleep(5)
              print("All attempts failed.")
              return None

          # Load existing playlist
          if not os.path.exists(PLAYLIST_FILE):
              print(f"{PLAYLIST_FILE} not found! Please create it first.")
              exit(1)

          try:
              with open(PLAYLIST_FILE, 'r', encoding='utf-8') as f:
                  playlist = json.load(f)
          except Exception as e:
              print(f"Error reading {PLAYLIST_FILE}: {e}")
              exit(1)

          if not isinstance(playlist, list) or len(playlist) == 0:
              print("Playlist is empty or invalid!")
              exit(1)

          # Get fresh cookie
          new_cookie = extract_cookie_from_worker()
          if not new_cookie:
              print("Failed to get cookie. Exiting.")
              exit(1)

          # Update cookie in ALL channels
          updated = False
          for i, channel in enumerate(playlist):
              if "cookie" in channel:
                  old_cookie = channel["cookie"]
                  if old_cookie != new_cookie:
                      channel["cookie"] = new_cookie
                      print(f"Updated [{i+1}] {channel.get('name', 'Unknown')} cookie")
                      updated = True
              else:
                  channel["cookie"] = new_cookie
                  print(f"Added cookie to [{i+1}] {channel.get('name', 'Unknown')}")
                  updated = True

          if not updated:
              print("No changes needed.")
              exit(0)

          # Save back
          with open(PLAYLIST_FILE, 'w', encoding='utf-8') as f:
              json.dump(playlist, f, indent=2, ensure_ascii=False)
          print(f"{PLAYLIST_FILE} updated with new cookie in {len(playlist)} channels!")

          PY

      - name: Commit & Push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add Jiotv.json
          git diff --quiet && echo "No changes" && exit 0
          git commit -m "Auto: Updated cookie in all channels"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
