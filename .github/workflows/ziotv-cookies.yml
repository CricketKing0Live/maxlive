name: Update JioTV Cookies

on:
  schedule:
    - cron: '0 */6 * * *' # Runs every 6 hours (0:00, 6:00, 12:00, 18:00 UTC)
  workflow_dispatch: # Allows manual triggering

jobs:
  update-cookies:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for git operations

      # Set up Python with caching
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          cache: 'pip' # Cache pip dependencies using requirements.txt

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Fetch cookies and update Ziotv.json
      - name: Update cookies in Ziotv.json
        run: |
          python - <<EOF
          import requests
          import json
          import re
          import os
          from datetime import datetime
          from time import sleep

          # URL to fetch cookies
          m3u_url = "https://raw.githubusercontent.com/alex8875/m3u/refs/heads/main/jtv.m3u"

          # Function to fetch m3u content with retries
          def fetch_m3u_content(url, retries=3, delay=5):
            for attempt in range(retries):
              try:
                response = requests.get(url, timeout=10)
                response.raise_for_status()
                return response.text
              except requests.RequestException as e:
                print(f"Attempt {attempt + 1}/{retries} failed: {e}")
                if attempt < retries - 1:
                  sleep(delay)
                else:
                  print(f"Error: Failed to fetch m3u file after {retries} attempts")
                  exit(1)

          # Fetch m3u file
          m3u_content = fetch_m3u_content(m3u_url)
          print(f"m3u content (first 1000 chars):\n{m3u_content[:1000]}")

          # Extract __hdnea__ cookie
          cookie_patterns = [
            r'__hdnea__=[^\s"\n;),]+',  # Primary pattern
            r'__hdnea__=[^"\n;]+',     # Fallback pattern
            r'__hdnea__=[^\s\n]+',     # Broad fallback
          ]
          new_cookie = None
          for pattern in cookie_patterns:
            cookie_match = re.search(pattern, m3u_content)
            if cookie_match:
              new_cookie = cookie_match.group(0).rstrip(';').strip()
              break
          if not new_cookie:
            print("Error: No __hdnea__ cookie found in m3u file")
            exit(1)
          print(f"Extracted cookie: {new_cookie}")

          # Path to Ziotv.json
          json_file = "Ziotv.json"
          if not os.path.exists(json_file):
            print(f"Error: {json_file} not found in repository root")
            exit(1)

          # Verify file is readable and writable
          if not os.access(json_file, os.R_OK | os.W_OK):
            print(f"Error: {json_file} is not readable or writable")
            exit(1)

          # Read Ziotv.json
          try:
            with open(json_file, 'r') as f:
              file_content = f.read()
              if not file_content.strip():
                print(f"Error: {json_file} is empty")
                exit(1)
              data = json.loads(file_content)
          except json.JSONDecodeError as e:
            print(f"Error: Invalid JSON in {json_file}: {e}")
            exit(1)
          except Exception as e:
            print(f"Error reading {json_file}: {e}")
            exit(1)

          # Update cookie field
          updated = False
          if isinstance(data, list):
            for index, item in enumerate(data):
              if not isinstance(item, dict):
                print(f"Warning: Item at index {index} is not a dictionary, skipping")
                continue
              if "cookie" not in item or item["cookie"] != new_cookie:
                old_cookie = item.get("cookie", "none")
                item["cookie"] = new_cookie
                updated = True
                print(f"Updated/Added cookie for {item.get('name', 'unknown')} (index {index}): {old_cookie} -> {new_cookie}")
          elif isinstance(data, dict):
            if "cookie" not in data or data["cookie"] != new_cookie:
              old_cookie = data.get("cookie", "none")
              data["cookie"] = new_cookie
              updated = True
              print(f"Updated/Added cookie: {old_cookie} -> {new_cookie}")
          else:
            print("Error: Ziotv.json is neither a list nor a dictionary")
            exit(1)

          if not updated:
            print("No changes needed in Ziotv.json")
            exit(0) # Exit without committing if no changes

          # Write updated JSON
          try:
            with open(json_file, 'w') as f:
              json.dump(data, f, indent=2)
              f.write('\n')
            print(f"Successfully wrote updated {json_file}")
          except Exception as e:
            print(f"Error writing to {json_file}: {e}")
            exit(1)
          EOF

      # Commit and push changes only if modified
      - name: Commit and push changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add Ziotv.json
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          git commit -m "Update cookies in Ziotv.json (Run: $(date -u '+%Y-%m-%d %H:%M:%S UTC'))"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
