name: Auto Update JioTV Cookies (Fixed Path and Force Update Every 6 Hours)
on:
  schedule:
    - cron: '0 */6 * * *' # Har 6 ghante (12:00 AM, 6:00 AM, 12:00 PM, 6:00 PM IST)
  workflow_dispatch: # Manual trigger
jobs:
  update-cookies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Fetch and Debug new URL
        run: |
          echo "=== Fetching from https://jo-json.vodep39240327.workers.dev/ ==="
          curl -s https://jo-json.vodep39240327.workers.dev/ > stream.json
          if [ ! -s stream.json ]; then
            echo "✗ ERROR: Failed to fetch stream.json. File is empty."
            exit 1
          fi
          echo "File size: $(wc -c < stream.json) bytes"
          echo "Full stream.json preview (first 500 chars):"
          head -c 500 stream.json | tr -d '\n' | fold -w 80
          echo "Searching for url field..."
          if jq -e '.url' stream.json >/dev/null 2>&1; then
            echo "✓ url field found in file!"
          else
            echo "✗ url field NOT found. Dumping first 100 lines:"
            head -n 100 stream.json
            exit 1
          fi
      - name: Extract Cookie and Update Jiotv.json
        run: |
          echo "=== Extracting Cookie ==="
          # Extract the URL from the JSON
          URL=$(jq -r '.url' stream.json 2>/dev/null || echo "null")
          if [ "$URL" = "null" ]; then
            echo "✗ ERROR: No valid URL found in .url. Update skipped."
            echo "Raw stream.json content (first 100 lines):"
            head -n 100 stream.json
            exit 0
          fi
          # Extract the __hdnea__ parameter from the URL
          NEW_COOKIE=$(echo "$URL" | grep -oE '__hdnea__=[^ ]+' | cut -d'=' -f2- || echo "null")
          if [ "$NEW_COOKIE" = "null" ]; then
            echo "✗ ERROR: No valid __hdnea__ cookie found in URL. Update skipped."
            echo "Raw URL: $URL"
            exit 0
          fi
          echo "✓ Cookie extracted: $NEW_COOKIE"

          echo "=== Updating Jiotv.json ==="
          # Create backup
          cp Jiotv.json Jiotv_backup.json 2>/dev/null || echo '[]' > Jiotv_backup.json
          # Validate Jiotv.json
          if ! jq -e . Jiotv_backup.json >/dev/null 2>&1; then
            echo "✗ WARNING: Jiotv.json is invalid JSON. Creating a basic structure."
            echo '[{"cookie": ""}]' > Jiotv_backup.json
          fi
          # Update the cookie field in each object
          jq --arg new_cookie "$NEW_COOKIE" 'map(.cookie = $new_cookie)' Jiotv_backup.json > Jiotv_updated.json
          mv Jiotv_updated.json Jiotv.json

          echo "✓ Update complete. New cookie: $NEW_COOKIE"
          echo "Preview of updated Jiotv.json (first entry's cookie):"
          jq '.[0].cookie' Jiotv.json 2>/dev/null || echo "No valid JSON to preview"
          echo "Full updated Jiotv.json preview (first 200 chars):"
          head -c 200 Jiotv.json

          if ! diff -q Jiotv_backup.json Jiotv.json >/dev/null 2>&1; then
            echo "✓ File changed!"
          else
            echo "✗ No change detected (possible same cookie)."
          fi
      - name: Force Commit Changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add Jiotv.json
          # Force commit with a timestamp file
          touch .force-update-timestamp
          git add .force-update-timestamp
          git commit -m "Auto-update cookies in Jiotv.json (new: ${{ github.sha }}) --no-verify" || {
            echo "✗ ERROR: Commit failed. Creating fallback commit."
            echo '{"update": "forced"}' > .force-commit.json
            git add .force-commit.json
            git commit -m "Fallback force update (new: ${{ github.sha }}) --no-verify"
          }
          git push || {
            echo "✗ ERROR: Git push failed. Check GITHUB_TOKEN or repo permissions."
            git status
            exit 1
          }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
